apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'
apply plugin: 'androidx.navigation.safeargs.kotlin'

android {
    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools
    defaultConfig {
        applicationId "com.android.example.weather"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        def addConstantTo = {target, constantName, constantValue ->
            target.manifestPlaceholders += [ (constantName):constantValue]
            target.buildConfigField "String", "${constantName}", "\"${constantValue}\""
        }

        debug {
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
            buildConfigField "String", "BASE_URL", "\"" + getBaseUrl() + "\""
            buildConfigField "String", "API_KEY", "\"" + getApiKey() + "\""
            addConstantTo(owner, "MAPS_API_KEY", getMapsApiKey())
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", "\"" + getBaseUrl() + "\""
            buildConfigField "String", "API_KEY", "\"" + getApiKey() + "\""
            addConstantTo(owner, "MAPS_API_KEY", getMapsApiKey())

        }
    }

    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }
    lintOptions {
        lintConfig rootProject.file('lint.xml')
    }
}

dependencies {
    implementation deps.app_compat
    implementation deps.recyclerview
    implementation deps.cardview
    implementation deps.material
    implementation deps.core_ktx
    implementation deps.transition
    implementation deps.fragment.testing
    implementation deps.navigation.fragment_ktx
    implementation deps.room.runtime
    implementation deps.lifecycle.livedata_ktx
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.java8
    implementation deps.retrofit.runtime
    implementation deps.retrofit.gson
    implementation deps.glide.runtime

    implementation deps.dagger.runtime
    implementation deps.dagger.android
    implementation deps.dagger.android_support
    implementation deps.constraint_layout
    implementation deps.kotlin.stdlib

    implementation deps.timber

    implementation deps.play_services_maps

    implementation deps.play_services_location

    kapt deps.dagger.android_support_compiler
    kapt deps.dagger.compiler
    kapt deps.room.compiler
    kapt deps.lifecycle.compiler

    testImplementation deps.junit
    testImplementation deps.mock_web_server
    testImplementation deps.arch_core.testing
    testImplementation deps.mockito.core

    androidTestImplementation deps.atsl.core
    androidTestImplementation deps.atsl.ext_junit
    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.atsl.rules

    androidTestImplementation deps.app_compat
    androidTestImplementation deps.recyclerview
    androidTestImplementation deps.cardview
    androidTestImplementation deps.material

    androidTestImplementation deps.espresso.core
    androidTestImplementation deps.espresso.contrib

    androidTestImplementation deps.arch_core.testing
    androidTestImplementation deps.mockito.core
    androidTestImplementation deps.mockito.android
}

// we need all open to run tests which we enable only for debug builds.
project.tasks.whenTaskAdded {
    if (it.name == "testReleaseUnitTest") {
        it.enabled = false
    }
}

def getBaseUrl() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    String baseUrl = properties.getProperty("BASE_URL")
    if (baseUrl == null)
        throw new GradleException("Add 'BASE_URL' field at local.properties file.")

    return baseUrl
}

def getApiKey() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    String appId = properties.getProperty("APP_ID")
    if (appId == null)
        throw new GradleException("Add 'APP_ID' field at local.properties file.")

    return appId
}

def getMapsApiKey() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    String appId = properties.getProperty("MAPS_API_KEY")
    if (appId == null)
        throw new GradleException("Add 'MAPS_API_KEY' field at local.properties file.")

    return appId
}
